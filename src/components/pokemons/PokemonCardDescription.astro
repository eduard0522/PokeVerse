---
import { Icon } from 'astro-icon/components'
import BtnFavorite from './BtnFavorite.astro'
import TitleCard from './TitleCard.astro'
import TypeTag from './TypeTag.astro'
import { filterByType } from 'src/utilities/getWeaknessesAndStrengths'

interface Props {
  name: string
  url: string
  isBig?: boolean
  description?: string
  types: string[]
  id?: string | number
  weight : string
  height: string
}

const { name, url, isBig, description, types, id , height , weight } = Astro.props
const pokemonId = url.split('/').at(-2)
const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemonId}.png`
const pokemonWeight = parseFloat(weight)/10
const pokemonHeight = parseFloat(height)/10
const data = await filterByType(types)
---

<a
  id='card'
  href=`/pokemons/${name}`
  class='flex- flex-col items-center justify-center group transition-all
  p-2 rounded-2xl'
>
  <article class="flex">
      
      <div class="flex flex-col items-center mt-8">
        <h2 class="text-white text-xl">Fortalezas</h2>
        <div>
          {
            data.map((type) => <TypeTag types={type.strengths} columns={true} /> )
          }
        </div>
         <div class="flex flex-col items-start gap-4"> 
            <p class="text-lg md:text-xl text-zinc-100 block"> <span class="font-semibold text-sky-500"> Altura: </span> {pokemonHeight} Metros </h>  
            <p class="text-lg md:text-xl text-zinc-100 block">  <span class="font-semibold text-sky-500">Peso: </span> {pokemonWeight} Kilogramos </ty> 
          </div>
     </div>

      <div>
        <div class='relative'>
         <BtnFavorite name={name} id={id} /> 
          <img
            transition:name={`${name}-image`}
            src={imageUrl}
            alt=`Pokemon ${name}`
            class='mx-auto  w-xl h-auto'
          />
        </div>
     
         <TitleCard name={name} isBig={isBig} />
        
        <div class="flex flex-col items-start">
            <TypeTag types={types} /> 
        </div>
        <p
          class='text-xl md:text-2xl xl:text-3xl py-4 text-center text-slate-100 max-w-3xl'
        >
          {description}
        </p>

        <button class="text-sky-400 text-2xl text-center mx-auto block cursor-pointer hover:text-sky-600 mt-8 "  onclick="history.back()">  <Icon name="back-outline" class="inline-block text-4xl" /> Regresar </button>
    </div>

    <div class="flex flex-col items-center mt-8">
        <h2 class="text-white text-xl">Debilidades</h2>
        <div>
          {
            data.map((type) => <TypeTag types={type.weaknesses} columns={true} /> )
          }
        </div>
     </div>

  </article>

   

</a>

<script>
import type { FavoritePokemon as Favorite } from "../../interfaces/FavoritePokemon"

  const getStoredFavorites = () => {
    const storedFavorites = localStorage.getItem('favorites')
    let favoritesArray = storedFavorites
      ? JSON.parse(storedFavorites).favorites
      : []
    return favoritesArray
  }

  const setStoredFavorites = (newStored: Favorite[]): void => {
    localStorage.setItem('favorites', JSON.stringify({ favorites: newStored }))
  }

  const validateFavorite = (pokemonId: string) => {
    let storedFavorites = getStoredFavorites()
    const isFavorite = storedFavorites?.some(
      (pokemon: Favorite) => pokemon.pokemonId === pokemonId
    )
    return isFavorite
  }

  const handleFavorite = (pokemonName: string, pokemonId: string) => {
    let storedFavorites = getStoredFavorites()

    const isFavorite = validateFavorite(pokemonId)
    if (!isFavorite) {
      storedFavorites.push({ pokemonName, pokemonId })
    } else {
      storedFavorites = storedFavorites.filter(
        (fav: Favorite) => fav.pokemonId !== pokemonId
      )
    }
    setStoredFavorites(storedFavorites)
  }

  const setClassListHidden = (pokemonId: string): void => {
    const heartFill = document.querySelector('.heart-fill')
    const heartOutline = document.querySelector('.heart-outline')
    const isFavorite = validateFavorite(pokemonId)

    if (!heartOutline || !heartFill) return

    if (isFavorite) {
      heartFill.classList.remove('hidden')
      heartOutline.classList.add('hidden')
    } else {
      heartFill.classList.add('hidden')
      heartOutline.classList.remove('hidden')
    }
  }

  const handlePageLoad = () => {
    const btnFavorite = document.querySelector('#btn-favorite')

    if (!btnFavorite || !(btnFavorite instanceof HTMLButtonElement)) return

    const pokemonName = btnFavorite.dataset.name
    const pokemonId = btnFavorite.dataset.id

    if (!pokemonId || !pokemonName) return
    setClassListHidden(pokemonId)

    btnFavorite.addEventListener('click', () => {
      handleFavorite(pokemonName, pokemonId)
    })
  }

  document.addEventListener('astro:page-load', handlePageLoad)
</script>
