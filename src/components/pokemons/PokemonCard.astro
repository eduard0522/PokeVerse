---
import BtnFavorite from './BtnFavorite.astro'
import TitleCard from './TitleCard.astro'
import TypeTag from './TypeTag.astro'

interface Props {
  name: string
  url: string
  isBig?: boolean
  description?: string
  types?: string[]
  id?: string | number
}

const { name, url, isBig, description, types, id } = Astro.props
const pokemonId = url.split('/').at(-2)
const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemonId}.png`
---

<a
  id='card'
  href=`/pokemons/${name}`
  class='flex- flex-col items-center justify-center group transition-all
  p-2 rounded-2xl'
>
  <div class='relative'>
    {isBig ? <BtnFavorite name={name} id={id} /> : ''}
    <img
      transition:name={`${name}-image`}
      src={imageUrl}
      alt=`Pokemon ${name}`
      class:list={[
        'mx-auto transition-all h-48',
        { 'group-hover:scale-110': !isBig },
        { 'w-2xl h-auto': isBig },
      ]}
    />
  </div>
  {isBig ? <TypeTag types={types} /> : ''}
  <TitleCard name={name} isBig={isBig} />
  <p
    class='text-xl md:text-2xl xl:text-4xl py-4 text-center text-slate-100 max-w-3xl'
  >
    {description}
  </p>
</a>

<script>
  interface Favorite {
    pokemonId: string
    pokemonName: string
  }

  const getStoredFavorites = () => {
    const storedFavorites = localStorage.getItem('favorites')
    let favoritesArray = storedFavorites
      ? JSON.parse(storedFavorites).favorites
      : []
    return favoritesArray
  }

  const setStoredFavorites = (newStored: Favorite[]): void => {
    localStorage.setItem('favorites', JSON.stringify({ favorites: newStored }))
  }

  const validateFavorite = (pokemonId: string) => {
    let storedFavorites = getStoredFavorites()
    const isFavorite = storedFavorites?.some(
      (pokemon: Favorite) => pokemon.pokemonId === pokemonId
    )
    return isFavorite
  }

  const handleFavorite = (pokemonName: string, pokemonId: string) => {
    let storedFavorites = getStoredFavorites()

    const isFavorite = validateFavorite(pokemonId)
    if (!isFavorite) {
      storedFavorites.push({ pokemonName, pokemonId })
    } else {
      storedFavorites = storedFavorites.filter(
        (fav: Favorite) => fav.pokemonId !== pokemonId
      )
    }
    setStoredFavorites(storedFavorites)
  }

  const setClassListHidden = (pokemonId: string): void => {
    const heartFill = document.querySelector('.heart-fill')
    const heartOutline = document.querySelector('.heart-outline')
    const isFavorite = validateFavorite(pokemonId)

    if (!heartOutline || !heartFill) return

    if (isFavorite) {
      heartFill.classList.remove('hidden')
      heartOutline.classList.add('hidden')
    } else {
      heartFill.classList.add('hidden')
      heartOutline.classList.remove('hidden')
    }
  }

  const handlePageLoad = () => {
    const btnFavorite = document.querySelector('#btn-favorite')

    if (!btnFavorite || !(btnFavorite instanceof HTMLButtonElement)) return

    const pokemonName = btnFavorite.dataset.name
    const pokemonId = btnFavorite.dataset.id

    if (!pokemonId || !pokemonName) return
    setClassListHidden(pokemonId)

    btnFavorite.addEventListener('click', () => {
      handleFavorite(pokemonName, pokemonId)
    })
  }

  document.addEventListener('astro:page-load', handlePageLoad)
</script>
